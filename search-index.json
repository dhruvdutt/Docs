[{"content":"<h1 id=\"api-prime-objective-scale\"><img src=\"https://i.imgur.com/Eppz2lz.png?1\" alt=\"SCALR\"> API Prime Objective: Scale</h1><p>As the name suggests, our prime focus with this iteration of the API has been achieving a massive scale of API operations, to the tune of <a href=\"http://news.appbase.io/scaling-elasticsearch-writes/\">100,000 writes</a> and reads (yet to corroborate) per second. </p><p>You might wonder - why is addressing scale so important? A typical successful application would never exceed a throughput of a  few hundred requests per second and generally be okay with serving responses in time.</p><p>So much complexity in software comes from trying to make one thing do two things.<br>-Ryan Singer</p><p>This quote from Ryan Singer especially sings true when one thinks of scaling database operations. So much of the software service complexities stem from keeping up with the infrastructure needs, that those end up turning into burning pain points. It should come as no surprise that most mainstream distributed systems were born out of the scaling pain points faced by the 0.01% of applications.</p><p>Not only does addressing scale solve the burning pain points faced by the 0.01%, it provides confidence around the edge-cases and leads to faster adoption in production environments and success stories. We hope all of these come true for SCALR. In building SCALR, focusing on scale has lead us to a better foundational design, a more rigorously tested codebase, and a fine-grained monitoring of our deployment infrastructure. We’ll go more in depth about these learnings over the next few months, but most importantly - for the 99.9% folks reading this, <code style=\"white-space: pre;\">SCALR</code> has tons of improvements and features over <code style=\"white-space: pre;\">v2</code>.</p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":" API PRIME OBJECTIVE: SCALE"},{"content":"<h1 id=\"api-intro\">API Intro</h1><p>Welcome to the land of SCALR, where everyone smiles and the sun shines bright. </p><p><img src=\"https://i.imgur.com/3nYaIQM.png?1\" alt=\"SCALR banner image\"></p><p>Our beloved Hobo Lobo is chalking a ‘SCALR’ 101. </p><p>“changes what?”, asks someone.<br>“Everything”, says Hobo Lobo rather curtly.</p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"API INTRO"},{"content":"<h2 id=\"api-intro-scalr-whats-in-a-name\"><code style=\"white-space: pre;\">SCALR</code> - What’s in a name</h2><p>The most tangible change is in the codename - <code style=\"white-space: pre;\">scalr</code>. Breaking the convention of keeping a dull version name like <code style=\"white-space: pre;\">v2.0</code>, we will go with the version <code style=\"white-space: pre;\">scalr</code>. Docs for scalr are available at <a href=\"\">https://docs.appbase.io/</a> and the API base URL would be <code style=\"white-space: pre;\">https://scalr.api.appbase.io</code>.</p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"SCALR - WHAT’S IN A NAME"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-compatible-with-elasticsearch\">Compatible with ElasticSearch</h3><p><code style=\"white-space: pre;\">scalr</code> is compatible out of the box with v2.4 ElasticSearch API. This means our users can take advantage of the vast plethora of client libraries made available by the folks at Elastic, have access to a vibrant open-source community and have the freedom to import / export data from Appbase.io conveniently. </p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"Compatible with ElasticSearch"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-data-streams-20\">Data Streams 2.0</h3><p>Data Streams aka realtime events are rethought in <code style=\"white-space: pre;\">SCALR</code>. Instead of being a websockets based extension of the API to track just the document and reference changes, data streams are deeply baked into the <code style=\"white-space: pre;\">SCALR</code> API. Data Streams are implemented over both <strong>websockets</strong> (for browsers) and <strong>http-streaming</strong> (for other runtimes) and are pervasive over web, mobile and language native libraries. Data Streams can stream results of queries and filters as new data is indexed into an app.</p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"Data Streams 2.0"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-http-basic-authentication\">HTTP Basic Authentication</h3><p><code style=\"white-space: pre;\">scalr</code> uses HTTP Basic Authentication for securing app access (similar to Github and Wordpress’s authentication mechanisms). Every Appbase app can have one or more access tokens (username, password) with differing read and write permissions to allow fine-grained access. Most ElasticSearch libraries support HTTP Basic Auth already, a major compatibility win.</p><p>What’s more, multiple appbase.io Basic Auth credentials can be generated per app with (read, write) controllable permissions.</p>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"HTTP Basic Authentication"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-zero-ops\">Zero Ops</h3><p>The APIs related to devops, like clusters, multi-index operations, index creation are not a part of Appbase.io. Appbase is opinionated about devops and handles that internally.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/concepts/index\" ng-bind=\"folder.name\" href=\"#/scalr/concepts/index\">concepts</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/intro\" ng-bind=\"file.label\" href=\"#/scalr/concepts/intro\">Intro</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/datamodel\" ng-bind=\"file.label\" href=\"#/scalr/concepts/datamodel\">Data Model</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/databrowser\" ng-bind=\"file.label\" href=\"#/scalr/concepts/databrowser\">Data Browser</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/concepts.html","spaLink":"#/scalr/concepts","title":"Zero Ops"},{"content":"<h1 id=\"api-prime-objective-scale\"><img src=\"https://i.imgur.com/Eppz2lz.png?1\" alt=\"SCALR\"> API Prime Objective: Scale</h1><p>As the name suggests, our prime focus with this iteration of the API has been achieving a massive scale of API operations, to the tune of <a href=\"http://news.appbase.io/scaling-elasticsearch-writes/\">100,000 writes</a> and reads (yet to corroborate) per second. </p><p>You might wonder - why is addressing scale so important? A typical successful application would never exceed a throughput of a  few hundred requests per second and generally be okay with serving responses in time.</p><p>So much complexity in software comes from trying to make one thing do two things.<br>-Ryan Singer</p><p>This quote from Ryan Singer especially sings true when one thinks of scaling database operations. So much of the software service complexities stem from keeping up with the infrastructure needs, that those end up turning into burning pain points. It should come as no surprise that most mainstream distributed systems were born out of the scaling pain points faced by the 0.01% of applications.</p><p>Not only does addressing scale solve the burning pain points faced by the 0.01%, it provides confidence around the edge-cases and leads to faster adoption in production environments and success stories. We hope all of these come true for SCALR. In building SCALR, focusing on scale has lead us to a better foundational design, a more rigorously tested codebase, and a fine-grained monitoring of our deployment infrastructure. We’ll go more in depth about these learnings over the next few months, but most importantly - for the 99.9% folks reading this, <code style=\"white-space: pre;\">SCALR</code> has tons of improvements and features over <code style=\"white-space: pre;\">v2</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":" API PRIME OBJECTIVE: SCALE"},{"content":"<h1 id=\"api-intro\">API Intro</h1><p>Welcome to the land of SCALR, where everyone smiles and the sun shines bright. </p><p><img src=\"https://i.imgur.com/3nYaIQM.png?1\" alt=\"SCALR banner image\"></p><p>Our beloved Hobo Lobo is chalking a ‘SCALR’ 101. </p><p>“changes what?”, asks someone.<br>“Everything”, says Hobo Lobo rather curtly.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"API INTRO"},{"content":"<h2 id=\"api-intro-scalr-whats-in-a-name\"><code style=\"white-space: pre;\">SCALR</code> - What’s in a name</h2><p>The most tangible change is in the codename - <code style=\"white-space: pre;\">scalr</code>. Breaking the convention of keeping a dull version name like <code style=\"white-space: pre;\">v2.0</code>, we will go with the version <code style=\"white-space: pre;\">scalr</code>. Docs for scalr are available at <a href=\"\">https://docs.appbase.io/</a> and the API base URL would be <code style=\"white-space: pre;\">https://scalr.api.appbase.io</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"SCALR - WHAT’S IN A NAME"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-compatible-with-elasticsearch\">Compatible with ElasticSearch</h3><p><code style=\"white-space: pre;\">scalr</code> is compatible out of the box with v2.4 ElasticSearch API. This means our users can take advantage of the vast plethora of client libraries made available by the folks at Elastic, have access to a vibrant open-source community and have the freedom to import / export data from Appbase.io conveniently. </p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"Compatible with ElasticSearch"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-data-streams-20\">Data Streams 2.0</h3><p>Data Streams aka realtime events are rethought in <code style=\"white-space: pre;\">SCALR</code>. Instead of being a websockets based extension of the API to track just the document and reference changes, data streams are deeply baked into the <code style=\"white-space: pre;\">SCALR</code> API. Data Streams are implemented over both <strong>websockets</strong> (for browsers) and <strong>http-streaming</strong> (for other runtimes) and are pervasive over web, mobile and language native libraries. Data Streams can stream results of queries and filters as new data is indexed into an app.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"Data Streams 2.0"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-http-basic-authentication\">HTTP Basic Authentication</h3><p><code style=\"white-space: pre;\">scalr</code> uses HTTP Basic Authentication for securing app access (similar to Github and Wordpress’s authentication mechanisms). Every Appbase app can have one or more access tokens (username, password) with differing read and write permissions to allow fine-grained access. Most ElasticSearch libraries support HTTP Basic Auth already, a major compatibility win.</p><p>What’s more, multiple appbase.io Basic Auth credentials can be generated per app with (read, write) controllable permissions.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"HTTP Basic Authentication"},{"content":"<h3 id=\"api-intro-scalr-whats-in-a-name-zero-ops\">Zero Ops</h3><p>The APIs related to devops, like clusters, multi-index operations, index creation are not a part of Appbase.io. Appbase is opinionated about devops and handles that internally.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/concepts/index\" ng-bind=\"folder.name\" href=\"#/scalr/concepts/index\">concepts</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/intro\" ng-bind=\"file.label\" href=\"#/scalr/concepts/intro\">Intro</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/datamodel\" ng-bind=\"file.label\" href=\"#/scalr/concepts/datamodel\">Data Model</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/databrowser\" ng-bind=\"file.label\" href=\"#/scalr/concepts/databrowser\">Data Browser</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"Zero Ops"},{"content":"<h1 id=\"appbase-data-model\">Appbase Data Model</h1>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APPBASE DATA MODEL"},{"content":"<h2 id=\"appbase-data-model-what-is-appbaseio\">What is appbase.io</h2><p><a href=\"https://appbase.io\">Appbase.io</a> is a data streams API service for building reactive apps, building dynamic views based on user interactions.</p><p>It enables you to:  </p><ul>\n<li>Build a blazing fast text search, pub/sub based messaging system, or implement a combination of esoteric filters (fuzzy, geo, terms, range, multiple items),</li>\n<li>Stream JSON results directly as new data is added or when the original data is updated,  </li>\n<li>Scale seamlessly up to hundreds and thousands of data updates per second.</li>\n</ul><p><img src=\"https://i.imgur.com/iJpqtks.png?1\" alt=\"Appbase Architecture\"><br><strong>Image 1:</strong> It provides a reliable data streams API as a service, while leveraging ElasticSearch (and Lucene) for storage and search.</p><p>We have also seen users use appbase.io as a hosted ElasticSearch API as well as a message queue with a HTTP API based publish / subscribe model.</p><p>There are some catches if you intend to:  </p><ul>\n<li>Use it as a primary data store - ElasticSearch can <a href=\"https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html#_data_store_recommendations\">lose data</a> under certain circumstances when network partitions occur.  </li>\n<li>Model financial or sensitive data - Appbase.io is not ACIDic and we don’t intend it to be in the near future. A good design choice in such a situation would be to use something that supports ACID transactions for storing sensitive data, and use Appbase.io for the data that needs to be searchable in realtime.</li>\n<li>OLAP use-cases - Being based on Elasticsearch, appbase.io is designed as an OLTP system although it supports aggregations and queries on data sets of the size of several gigabytes. There are plenty of ideal tools for OLAP use-cases - Amazon Redshift, Google Big Query, Apache Hadoop and Appbase.io can be used with any of them (via REST API).</li>\n</ul>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"WHAT IS APPBASE.IO"},{"content":"<h1 id=\"appbase-data-schema\">Appbase Data Schema</h1><p>Appbase uses the same data schema as ElasticSearch <code style=\"white-space: pre;\">v2.4</code>.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APPBASE DATA SCHEMA"},{"content":"<h2 id=\"appbase-data-schema-app-aka-index\">App <span style=\"font-weight: 200;\">aka Index</span></h2><p>An app in <a href=\"https://appbase.io\">appbase.io</a> is stored as an index in ElasticSearch. App is the highest level of construct supported by appbase and is equivalent to a <strong>database</strong> in SQL.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APP AKA INDEX"},{"content":"<h2 id=\"appbase-data-schema-type\">Type</h2><p>Types are similar to <strong>tables</strong> in SQL. JSON data (aka documents) in an app is logicaly partitioned using types, think of them as namespaces for arranging and querying similar kinds of data.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"TYPE"},{"content":"<h2 id=\"appbase-data-schema-document\">Document</h2><p>A <strong>document</strong> is the actual data stored in an app. Documents are <code style=\"white-space: pre;\">JSON</code> objects, equivalent to <strong>records</strong> or <strong>rows</strong> in SQL.</p><p><br></p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"DOCUMENT"},{"content":"<h2 id=\"appbase-data-schema-visualizing-the-data-model\">Visualizing the Data Model</h2><p>An app can have one or more types and each type is a container for JSON documents. Visually, the arrangement looks like below:</p><p><a href=\"https://opensource.appbase.io/dejavu/live/#?input_state=XQAAAAJyAQAAAAAAAAA9iIqnY-B2BnTZGEQz6wkFsnR3mLY6qp78UrdyiX4kf3rJXqxmkCAfGPRGyyY4NGU7xDzBus7B3hXJNG4yyaH1H8guySgP4Wo-ZoNcdRwQLUR0z6eRlUmgmT3EhyDSjc2FAfNrp-UQUzBSnnBhUAyhUc5rRuJyHSzSRV3a7TCE0Kd0o7yFwt-ipsw76R6tWjdWWcUyRSNy1GB4J7q98DAmFVqpjdXO37X35pXONcdFgA4urdMJ5Q2oh_uG1Wf-mubQFDVcFYBy16t61GMMPqMmP_hyRVIOFI-kkHGSn0CWT8Iw1uS7K6C38TKBcr7Z2hjCiU3GHOVD2LhwKjDSrwV33ZTqcTd_Rh2ZWdSlokfaXOZmfVU7EcpaQjtZEEEat9eXD9UpGpX_ov1vAA\"><img src=\"https://i.imgur.com/LCvdVuu.png\" alt=\"Data Model View\"></a></p><p>Click on the image above to see the actual data, visualized with <a href=\"https://opensource.appbase.io/dejavu\">dejavu</a> data browser.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/concepts/index\" ng-bind=\"folder.name\" href=\"#/scalr/concepts/index\">concepts</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/intro\" ng-bind=\"file.label\" href=\"#/scalr/concepts/intro\">Intro</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/datamodel\" ng-bind=\"file.label\" href=\"#/scalr/concepts/datamodel\">Data Model</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/databrowser\" ng-bind=\"file.label\" href=\"#/scalr/concepts/databrowser\">Data Browser</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"VISUALIZING THE DATA MODEL"},{"content":"<h1 id=\"data-browser\">Data Browser</h1><p>Data Browser is a WYSIWG GUI for adding, modifying and viewing your appbase.io app’s data.</p><p>Data is stored as JSON documents in a <strong>type</strong>. You can read more about the data schema <a href=\"http://docs.appbase.io/scalr/concepts/datamodel.html#appbase-data-schema\">here</a>.</p>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"DATA BROWSER"},{"content":"<h2 id=\"data-browser-installation\">Installation</h2><p>The data browser is available within appbase.io app dashboard. But it can also be:</p><ul>\n<li>downloaded as a <a href=\"https://chrome.google.com/webstore/detail/dejavu/jopjeaiilkcibeohjdmejhoifenbnmlh\">chrome extension</a>,</li>\n<li>run as a <a href=\"dockerhub.com/r/appbaseio/dejavu\">docker container</a> or</li>\n<li>used as a hosted app <a href=\"https://opensource.appbase.io/dejavu/live\">here</a>.</li>\n</ul>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"INSTALLATION"},{"content":"<h2 id=\"data-browser-adding-your-first-data\">Adding Your First Data</h2><p><img src=\"https://i.imgur.com/Bh59Ej1.gif\" alt=\"\"></p><p>Follow the above gif to add your first data.</p>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"ADDING YOUR FIRST DATA"},{"content":"<h2 id=\"data-browser-operations\">Operations</h2>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"OPERATIONS"},{"content":"<h3 id=\"data-browser-operations-adding-data\">Adding Data</h3><p>The data browser allows adding data as a single JSON object or multiple JSON objects (passed as an array). It is recommended to pass up to 100 objects at a time.</p>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"Adding Data"},{"content":"<h3 id=\"data-browser-operations-updating-existing-data\">Updating Existing Data</h3><p>Existing data records can be updated easily. Select a record from the view and tap the <strong>Update</strong> button.</p><p><img src=\"https://i.imgur.com/9BTvUDI.png\" alt=\"\"></p>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"Updating Existing Data"},{"content":"<h3 id=\"data-browser-operations-deleting-data\">Deleting Data</h3><p>Data records can also be deleted easily. Select a record (or multiple) from the view and tap the <strong>Delete</strong> button.</p><p><img src=\"https://i.imgur.com/k74fwaQ.png\" alt=\"\"></p>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"Deleting Data"},{"content":"<h2 id=\"data-browser-doing-more-with-data\">Doing more with data</h2><p>While data browser is great to get started with appbase.io and for visualizing data, the recommended way to add data programatically is via the <a href=\"http://docs.appbase.io/scalr/rest/intro.html\">REST API</a> or one of the <a href=\"http://docs.appbase.io/scalr/javascript/nodejs-intro.html\">Node.JS</a> or <a href=\"https://godoc.org/github.com/appbaseio/go-appbase\">Golang</a> libraries.</p><p>The data browser is still a great place to visualize and debug the existing data records with its filters and continuous query functionalites.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/concepts/index\" ng-bind=\"folder.name\" href=\"#/scalr/concepts/index\">concepts</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/intro\" ng-bind=\"file.label\" href=\"#/scalr/concepts/intro\">Intro</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/datamodel\" ng-bind=\"file.label\" href=\"#/scalr/concepts/datamodel\">Data Model</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/concepts/databrowser\" ng-bind=\"file.label\" href=\"#/scalr/concepts/databrowser\">Data Browser</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/concepts/databrowser.html","spaLink":"#/scalr/concepts/databrowser","title":"DOING MORE WITH DATA"},{"content":"<h1 id=\"quick-start-to-the-js-api\">Quick Start to the <img src=\"https://i.imgur.com/Eppz2lz.png?1\" alt=\"Scalr\"> JS API</h1><p><a href=\"https://github.com/appbaseio/appbase-js\">Appbase.JS</a> is a minimalistic library for data streams.  </p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over <code style=\"white-space: pre;\">websockets</code>.</li>\n<li>Index new documents or update / delete existing ones.</li>\n</ul><p>It can’t:  </p><ul>\n<li>Configure mappings, change analyzers, or capture snapshots. All these are provided by <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a> - the official ElasticSearch JS client library.</li>\n</ul><p><a href=\"https://appbase.io\">Appbase</a> is opinionated about the cluster setup and doesn’t support the ElasticSearch devops APIs.</p><p>This is a quick start guide to whet the appetite with the possibilities of data streams.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"QUICK START TO THE  JS API"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"https://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib using <a href=\"https://bower.io\">bower</a>. We will use <code style=\"white-space: pre;\">v0.11.1</code> for specificity. </p><p>Requiring the lib takes just one line of html script injection:</p><p>Alternatively, a cdnjs version of the library can be used without requiring a bower install.</p><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the appbase.io API URL, app name, and credentials into the <code style=\"white-space: pre;\">Appbase</code> constructor:</p><p><strong>OR</strong></p><p>Credentials can also be directly passed as a part of the API URL.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"STEP 1: LIB SETUP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code style=\"white-space: pre;\">appbaseRef</code> in this tutorial), we can insert any JSON object into it with the <code style=\"white-space: pre;\">index()</code> method.</p><p>where <code style=\"white-space: pre;\">type: 'books'</code> indicate the collection (or table) inside which the data will be stored and the<code style=\"white-space: pre;\">id: '1'</code> is an optional unique identifier.</p><p>The <code style=\"white-space: pre;\">index()</code> method (and all the other <code style=\"white-space: pre;\">appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a collection in MongoDB or a table in SQL, and a <strong>document</strong> is similar to the document in MongoDB and equivalent to a row in SQL.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"STEP 2: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data\">Step 3: <s>GETing</s> vs Streaming Data</h2><p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, Appbase.io operates on both GET and stream modes. We will first apply the GET mode to read our just inserted object.</p><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code style=\"white-space: pre;\">get()</code> method.</p><p>Even though <code style=\"white-space: pre;\">get()</code> returns a single document data, appbase.io returns it as a stream object with the ‘data’ event handler.</p><p>Let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code style=\"white-space: pre;\">getStream()</code> method over <code style=\"white-space: pre;\">get()</code>, which keeps returning new changes made to the document.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"STEP 3: GETING VS STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3a-subscribing-to-document-stream\">3.a: Subscribing to document stream</h3><p>Don’t be surprised if you don’t see anything printed, <code style=\"white-space: pre;\">getStream()</code> only returns when new updates are made to the document.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"3.a: Subscribing to document stream"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3b-observe-the-updates-in-realtime\">3.b: Observe the updates in realtime</h3><p>Let’s see live updates in action. We will modify the book price in our original <code style=\"white-space: pre;\">jsonObject</code> variable from 5595 to 6034 and apply <code style=\"white-space: pre;\">index()</code> again.</p><p>For brevity, we will not show the <code style=\"white-space: pre;\">index()</code> operation here.</p><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code style=\"white-space: pre;\">Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"3.b: Observe the updates in realtime"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code style=\"white-space: pre;\">searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code style=\"white-space: pre;\">match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><p><code style=\"white-space: pre;\">Note:</code> Like <code style=\"white-space: pre;\">getStream()</code>, <code style=\"white-space: pre;\">searchStream()</code> subscribes to the new matches. For fetching existing search results, check out <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-getting-data-search\"><code style=\"white-space: pre;\">search()</code></a>.</p><p><strong>v0.10.0</strong> introduces a new method <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code style=\"white-space: pre;\">searchStreamToURL()</code></a> that streams results directly to a URL instead of streaming back.</p><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a>.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/javascript/index\" ng-bind=\"folder.name\" href=\"#/scalr/javascript/index\">javascript</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-intro\">JS Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/nodejs-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/nodejs-intro\">Node Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/api-reference\" ng-bind=\"file.label\" href=\"#/scalr/javascript/api-reference\">API Reference</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-webhooks\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-webhooks\">Webhooks Guide</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/javascript.html","spaLink":"#/scalr/javascript","title":"STEP 4: STREAMING RICH QUERIES"},{"content":"<h1 id=\"quick-start-to-the-nodejs-api\">Quick Start to the <img src=\"https://i.imgur.com/Eppz2lz.png?1\" alt=\"Scalr\"> Node.JS API</h1><p><a href=\"https://github.com/appbaseio/appbase-js\">Appbase.JS</a> is a minimalistic library for data streams.  </p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over <code style=\"white-space: pre;\">websockets</code>.</li>\n<li>Index new documents or update / delete existing ones.</li>\n</ul><p>It can’t:  </p><ul>\n<li>Configure mappings, change analyzers, or capture snapshots. All these are provided by <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a> - the official ElasticSearch JS client library.</li>\n</ul><p>Also, <a href=\"https://appbase.io\">Appbase</a> is opinionated about the cluster setup and doesn’t support the ElasticSearch devops APIs.</p><p>This is a quick start guide to whet the appetite with the possibilities of data streams.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"QUICK START TO THE  NODE.JS API"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"https://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib via <a href=\"https://www.npmjs.com/package/appbase-js\">npm</a>, current version should be v0.11.1.</p><p>Requiring the lib takes one line:</p><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the appbase.io API URL, app name, and credentials into the <code style=\"white-space: pre;\">Appbase</code> constructor:</p><p><strong>OR</strong></p><p>Credentials can also be directly passed as a part of the API URL.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 1: LIB SETUP"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code style=\"white-space: pre;\">appbaseRef</code> in this tutorial), we can insert any JSON object into it with the <code style=\"white-space: pre;\">index()</code> method.</p><p>where <code style=\"white-space: pre;\">type: \"books\"</code> indicate the collection (or table) inside which the data will be stored and the<code style=\"white-space: pre;\">id: '1'</code> is an optional unique identifier.</p><p>The <code style=\"white-space: pre;\">index()</code> method (and all the other <code style=\"white-space: pre;\">appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a collection in MongoDB or a table in SQL, and a <strong>document</strong> is similar to the document in MongoDB and equivalent to a row in SQL.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 2: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data\">Step 3: <s>GETing</s> vs Streaming Data</h2><p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, Appbase.io operates on both GET and stream modes. We will first apply the GET mode to read our just inserted object.</p><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code style=\"white-space: pre;\">get()</code> method.</p><p>Even though <code style=\"white-space: pre;\">get()</code> returns a single document data, appbase.io returns it as a stream object with the ‘data’ event handler.</p><p>Let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code style=\"white-space: pre;\">getStream()</code> method over <code style=\"white-space: pre;\">get()</code>, which keeps returning new changes made to the document.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 3: GETING VS STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data-3a-subscribing-to-document-stream\">3.a: Subscribing to document stream</h3><p>Don’t be surprised if you don’t see anything printed, <code style=\"white-space: pre;\">getStream()</code> only returns when new updates are made to the document.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"3.a: Subscribing to document stream"},{"content":"<h3 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data-3b-observe-the-updates-in-realtime\">3.b: Observe the updates in realtime</h3><p>Let’s see live updates in action. We will modify the book price in our original <code style=\"white-space: pre;\">jsonObject</code> variable from 5595 to 6034 and apply <code style=\"white-space: pre;\">index()</code> again.</p><p>For brevity, we will not show the <code style=\"white-space: pre;\">index()</code> operation here.</p><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code style=\"white-space: pre;\">Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"3.b: Observe the updates in realtime"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code style=\"white-space: pre;\">searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code style=\"white-space: pre;\">match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><p><code style=\"white-space: pre;\">Note:</code> Like <code style=\"white-space: pre;\">getStream()</code>, <code style=\"white-space: pre;\">searchStream()</code> subscribes to the new matches. For fetching existing search results, check out <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-getting-data-search\"><code style=\"white-space: pre;\">search()</code></a>.</p><p><strong>v0.10.0</strong> introduces a new method <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code style=\"white-space: pre;\">searchStreamToURL()</code></a> that streams results directly to a URL instead of streaming back.</p><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a>.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/javascript/index\" ng-bind=\"folder.name\" href=\"#/scalr/javascript/index\">javascript</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-intro\">JS Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/nodejs-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/nodejs-intro\">Node Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/api-reference\" ng-bind=\"file.label\" href=\"#/scalr/javascript/api-reference\">API Reference</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-webhooks\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-webhooks\">Webhooks Guide</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 4: STREAMING RICH QUERIES"},{"content":"<h1 id=\"quick-start-to-the-js-api\">Quick Start to the <img src=\"https://i.imgur.com/Eppz2lz.png?1\" alt=\"Scalr\"> JS API</h1><p><a href=\"https://github.com/appbaseio/appbase-js\">Appbase.JS</a> is a minimalistic library for data streams.  </p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over <code style=\"white-space: pre;\">websockets</code>.</li>\n<li>Index new documents or update / delete existing ones.</li>\n</ul><p>It can’t:  </p><ul>\n<li>Configure mappings, change analyzers, or capture snapshots. All these are provided by <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a> - the official ElasticSearch JS client library.</li>\n</ul><p><a href=\"https://appbase.io\">Appbase</a> is opinionated about the cluster setup and doesn’t support the ElasticSearch devops APIs.</p><p>This is a quick start guide to whet the appetite with the possibilities of data streams.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"QUICK START TO THE  JS API"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"https://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib using <a href=\"https://bower.io\">bower</a>. We will use <code style=\"white-space: pre;\">v0.11.1</code> for specificity. </p><p>Requiring the lib takes just one line of html script injection:</p><p>Alternatively, a cdnjs version of the library can be used without requiring a bower install.</p><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the appbase.io API URL, app name, and credentials into the <code style=\"white-space: pre;\">Appbase</code> constructor:</p><p><strong>OR</strong></p><p>Credentials can also be directly passed as a part of the API URL.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 1: LIB SETUP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code style=\"white-space: pre;\">appbaseRef</code> in this tutorial), we can insert any JSON object into it with the <code style=\"white-space: pre;\">index()</code> method.</p><p>where <code style=\"white-space: pre;\">type: 'books'</code> indicate the collection (or table) inside which the data will be stored and the<code style=\"white-space: pre;\">id: '1'</code> is an optional unique identifier.</p><p>The <code style=\"white-space: pre;\">index()</code> method (and all the other <code style=\"white-space: pre;\">appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a collection in MongoDB or a table in SQL, and a <strong>document</strong> is similar to the document in MongoDB and equivalent to a row in SQL.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 2: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data\">Step 3: <s>GETing</s> vs Streaming Data</h2><p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, Appbase.io operates on both GET and stream modes. We will first apply the GET mode to read our just inserted object.</p><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code style=\"white-space: pre;\">get()</code> method.</p><p>Even though <code style=\"white-space: pre;\">get()</code> returns a single document data, appbase.io returns it as a stream object with the ‘data’ event handler.</p><p>Let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code style=\"white-space: pre;\">getStream()</code> method over <code style=\"white-space: pre;\">get()</code>, which keeps returning new changes made to the document.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 3: GETING VS STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3a-subscribing-to-document-stream\">3.a: Subscribing to document stream</h3><p>Don’t be surprised if you don’t see anything printed, <code style=\"white-space: pre;\">getStream()</code> only returns when new updates are made to the document.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"3.a: Subscribing to document stream"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3b-observe-the-updates-in-realtime\">3.b: Observe the updates in realtime</h3><p>Let’s see live updates in action. We will modify the book price in our original <code style=\"white-space: pre;\">jsonObject</code> variable from 5595 to 6034 and apply <code style=\"white-space: pre;\">index()</code> again.</p><p>For brevity, we will not show the <code style=\"white-space: pre;\">index()</code> operation here.</p><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code style=\"white-space: pre;\">Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"3.b: Observe the updates in realtime"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code style=\"white-space: pre;\">searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code style=\"white-space: pre;\">match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><p><code style=\"white-space: pre;\">Note:</code> Like <code style=\"white-space: pre;\">getStream()</code>, <code style=\"white-space: pre;\">searchStream()</code> subscribes to the new matches. For fetching existing search results, check out <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-getting-data-search\"><code style=\"white-space: pre;\">search()</code></a>.</p><p><strong>v0.10.0</strong> introduces a new method <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code style=\"white-space: pre;\">searchStreamToURL()</code></a> that streams results directly to a URL instead of streaming back.</p><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a>.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/javascript/index\" ng-bind=\"folder.name\" href=\"#/scalr/javascript/index\">javascript</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-intro\">JS Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/nodejs-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/nodejs-intro\">Node Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/api-reference\" ng-bind=\"file.label\" href=\"#/scalr/javascript/api-reference\">API Reference</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-webhooks\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-webhooks\">Webhooks Guide</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 4: STREAMING RICH QUERIES"},{"content":"<h1 id=\"javascript-api-reference\">Javascript API Reference</h1><p>Appbase.JS is a minimalistic library for data streams.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over websockets (for browsers) and http-streams.</li>\n<li>Index new documents or update / delete existing ones.</li>\n<li>Is compatible with <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a>, which can be used for modifying the ES configurations and for using more esoteric methods.</li>\n</ul><p>You can read the <a href=\"http://docs.appbase.io/scalr/javascript/javascript-intro.html\">Javascript</a> or <a href=\"http://docs.appbase.io/scalr/javascript/nodejs-intro.html\">Node.JS</a> quick-start guides for installation and basic usage.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"JAVASCRIPT API REFERENCE"},{"content":"<h2 id=\"javascript-api-reference-setup\">SETUP</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"SETUP"},{"content":"<h3 id=\"javascript-api-reference-setup-new-appbase\">new Appbase()</h3><p>Returns a new Appbase object (refered to as <code style=\"white-space: pre;\">appbaseRef</code> in all the following examples) using the <code style=\"white-space: pre;\">url</code>, <code style=\"white-space: pre;\">appname</code> and <code style=\"white-space: pre;\">username</code>:<code style=\"white-space: pre;\">password</code> credentials.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">new Appbase(appData)</code></p><ul>\n<li><p><strong class=\"li-title\">appData</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the following fields and values</p>\n<ul>\n<li><strong class=\"li-title\">url</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>URL with the API version, always <em><a href=\"https://scalr.api.appbase.io\">https://scalr.api.appbase.io</a></em></li>\n<li><strong class=\"li-title\">appname</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>name of the app as displayed in the <a href=\"https://appbase.io/scalr\">dashboard</a></li>\n<li><strong class=\"li-title\">username</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>username as displayed in the app dashboard</li>\n<li><strong class=\"li-title\">password</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>password as displayed in the app dashboard</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">appData</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the following fields and values</p><ul>\n<li><strong class=\"li-title\">url</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>URL with the API version, always <em><a href=\"https://scalr.api.appbase.io\">https://scalr.api.appbase.io</a></em></li>\n<li><strong class=\"li-title\">appname</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>name of the app as displayed in the <a href=\"https://appbase.io/scalr\">dashboard</a></li>\n<li><strong class=\"li-title\">username</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>username as displayed in the app dashboard</li>\n<li><strong class=\"li-title\">password</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>password as displayed in the app dashboard</li>\n</ul><p><strong>Returns</strong></p><p><code style=\"white-space: pre;\">Object</code> <strong>appbaseRef</strong> <em>Appbase reference object</em> - has <code style=\"white-space: pre;\">index()</code>, <code style=\"white-space: pre;\">update()</code>, <code style=\"white-space: pre;\">delete()</code>, <code style=\"white-space: pre;\">bulk()</code>, <code style=\"white-space: pre;\">search()</code>, <code style=\"white-space: pre;\">get()</code>, <code style=\"white-space: pre;\">getTypes()</code>, <code style=\"white-space: pre;\">getStream()</code>, <code style=\"white-space: pre;\">searchStream()</code> and <code style=\"white-space: pre;\">searchStreamToURL()</code> methods.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"new Appbase()"},{"content":"<h2 id=\"javascript-api-reference-writing-data\">WRITING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"WRITING DATA"},{"content":"<h3 id=\"javascript-api-reference-writing-data-index\">index()</h3><p>Writes a JSON data object at a given <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> location, or replaces if an object already exists.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.index(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the type, id and the JSON data to be indexed</p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) under which the data will be indexed</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>Data to be indexed, a valid JSON object</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID for the JSON data. <code style=\"white-space: pre;\">id</code> is auto generated if not specified</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the type, id and the JSON data to be indexed</p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) under which the data will be indexed</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>Data to be indexed, a valid JSON object</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID for the JSON data. <code style=\"white-space: pre;\">id</code> is auto generated if not specified</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"index()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-update\">update()</h3><p>Partially updates an existing document at a given <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> location. The important difference with the index() method is that the latter replaces the existing data values wholesale, while update() only replaces the values that are specified in the <code style=\"white-space: pre;\">body.doc</code> field.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.update(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the type, id, and the partial JSON data to be updated</p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) under which the data will be indexed</li>\n<li><strong class=\"li-title\">body.doc</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>Partial doc JSON to be updated (all the JSON data can only reside under the body.doc field)</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID of the JSON document to be updated. <code style=\"white-space: pre;\">id</code> here is mandatory and should match an existing object.</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the type, id, and the partial JSON data to be updated</p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) under which the data will be indexed</li>\n<li><strong class=\"li-title\">body.doc</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>Partial doc JSON to be updated (all the JSON data can only reside under the body.doc field)</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID of the JSON document to be updated. <code style=\"white-space: pre;\">id</code> here is mandatory and should match an existing object.</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"update()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-delete\">delete()</h3><p>Delete a JSON data object by <code style=\"white-space: pre;\">id</code>.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.delete(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> of the JSON object to be deleted</p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) of the object to be deleted</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID for the JSON data</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> of the JSON object to be deleted</p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>The type (aka collection) of the object to be deleted</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID for the JSON data</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"delete()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-bulk\">bulk()</h3><p>Apply many index / delete operations together, useful when importing data for the first time.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.bulk(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">body</code> and optionally a default <code style=\"white-space: pre;\">type</code> to be used for actions</p>\n<ul>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A Javascript array of actions to be performed written as a sequence of action#1, data#1, action#2, data#2, … action#n, data#n</li>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Default document type for actions that don’t provide one</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">body</code> and optionally a default <code style=\"white-space: pre;\">type</code> to be used for actions</p><ul>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A Javascript array of actions to be performed written as a sequence of action#1, data#1, action#2, data#2, … action#n, data#n</li>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Default document type for actions that don’t provide one</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"bulk()"},{"content":"<h2 id=\"javascript-api-reference-getting-data\">GETTING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"GETTING DATA"},{"content":"<h3 id=\"javascript-api-reference-getting-data-get\">get()</h3><p>Get the JSON document from a particular <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code>. For subscribing to realtime updates on a document, check out <code style=\"white-space: pre;\">getStream()</code>.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.get(params)</code></p><ul>\n<li><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> of the document to retrieve.  <ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document Type</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID of the JSON document</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document Type</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Unique ID of the JSON document</li>\n</ul><p>Returns the document at the given <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code>.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"get()"},{"content":"<h3 id=\"javascript-api-reference-getting-data-gettypes\">getTypes()</h3><p>Get all the <code style=\"white-space: pre;\">types</code> of an appname.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.getTypes()</code></p><p>Returns all the <code style=\"white-space: pre;\">types</code> as an array.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"getTypes()"},{"content":"<h3 id=\"javascript-api-reference-getting-data-search\">search()</h3><p>Search for matching documents in a type. It’s a convenience method for ElasticSearch’s <code style=\"white-space: pre;\">/_search</code> endpoint.  For subscribing to realtime updates on the search query, check out <code style=\"white-space: pre;\">searchStream()</code>.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.search(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code>.</p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code>.</p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code style=\"white-space: pre;\">Object</code> with</p><ul>\n<li><code style=\"white-space: pre;\">'data'</code> and <code style=\"white-space: pre;\">'error'</code> event handlers to return the results and any errors.</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"search()"},{"content":"<h2 id=\"javascript-api-reference-streaming-data\">STREAMING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"STREAMING DATA"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-getstream\">getStream()</h3><p>Continuously stream new updates to a specific JSON document. If you wish to only fetch the existing value, <code style=\"white-space: pre;\">get()</code> is sufficient.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.getStream(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> of the document to be streamed.</p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document ID (The ID is always a <code style=\"white-space: pre;\">String</code> value)</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">id</code> of the document to be streamed.</p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">id</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document ID (The ID is always a <code style=\"white-space: pre;\">String</code> value)</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> The <code style=\"white-space: pre;\">streamOnly</code> field parameter is deprecated starting v0.9.0 onwards, and is the default for how <code style=\"white-space: pre;\">getStream()</code> works (previously <code style=\"white-space: pre;\">readStream()</code>).</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code style=\"white-space: pre;\">Object</code> with</p><ul>\n<li><code style=\"white-space: pre;\">'data'</code> and <code style=\"white-space: pre;\">'error'</code> event handlers</li>\n<li>a <strong>stop()</strong> method to stop the stream</li>\n</ul><p><code style=\"white-space: pre;\">Note:</code> appbase.js lib uses websockets to stream the updates.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"getStream()"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-searchstream\">searchStream()</h3><p>Continuously stream results of search query on a given <code style=\"white-space: pre;\">type</code>. Search queries can be a variety of things: from simple monitoring queries, finding an exact set of documents, full-text search queries, to geolocation queries.</p><p><code style=\"white-space: pre;\">searchStream()</code> subscribes to search results on new document inserts, existing search results can be fetched via <code style=\"white-space: pre;\">search()</code> method.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.searchStream(params)</code></p><ul>\n<li><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code></p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">params</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code></p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> The <code style=\"white-space: pre;\">streamOnly</code> field parameter is deprecated starting v0.9.0 onwards, and is the default for how <code style=\"white-space: pre;\">searchStream()</code> works.</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code style=\"white-space: pre;\">Object</code> with</p><ul>\n<li><code style=\"white-space: pre;\">'data'</code> and <code style=\"white-space: pre;\">'error'</code> event handlers</li>\n<li>a <strong>stop()</strong> method to stop the stream</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"searchStream()"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-searchstreamtourl\">searchStreamToURL()</h3><p>Continuously stream results of search query on a given <code style=\"white-space: pre;\">type</code> to a URL. <strong>searchStreamToURL()</strong> executes a webhook query on document insertion.</p><p><code style=\"white-space: pre;\">searchStreamToURL()</code> subscribes to search query results on new document inserts.</p><p><strong>Usage</strong></p><p><code style=\"white-space: pre;\">appbaseRef.searchStreamToURL(queryParams, urlParams)</code></p><ul>\n<li><p><strong class=\"li-title\">queryParams</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code></p>\n<ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n<li><p><strong class=\"li-title\">urlParams</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> - A Javascript object containing the <code style=\"white-space: pre;\">url</code> to which data would be streamed on a query match. It supports optional fields to attach JSON (or string) payloads, control the frequency and number of updates.</p>\n<ul>\n<li><strong class=\"li-title\">url</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A URL string</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A JSON object to be sent to the URL (used as an alternative to <strong>string_body</strong>)</li>\n<li><strong class=\"li-title\">string_body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A raw string to be sent to the URL (used as an alternative to <strong>body</strong>)</li>\n<li><strong class=\"li-title\">count</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Number</code> <br># of times the result-request should be sent before terminating the webhook</li>\n<li><strong class=\"li-title\">interval</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Number</code> <br>Wait duration in seconds before the next result-request</li>\n</ul>\n</li>\n</ul><p><strong class=\"li-title\">queryParams</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A Javascript object containing the query <code style=\"white-space: pre;\">type</code> and <code style=\"white-space: pre;\">body</code></p><ul>\n<li><strong class=\"li-title\">type</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>Document type</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><strong class=\"li-title\">urlParams</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> - A Javascript object containing the <code style=\"white-space: pre;\">url</code> to which data would be streamed on a query match. It supports optional fields to attach JSON (or string) payloads, control the frequency and number of updates.</p><ul>\n<li><strong class=\"li-title\">url</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A URL string</li>\n<li><strong class=\"li-title\">body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Object</code> <br>A JSON object to be sent to the URL (used as an alternative to <strong>string_body</strong>)</li>\n<li><strong class=\"li-title\">string_body</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">String</code> <br>A raw string to be sent to the URL (used as an alternative to <strong>body</strong>)</li>\n<li><strong class=\"li-title\">count</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Number</code> <br># of times the result-request should be sent before terminating the webhook</li>\n<li><strong class=\"li-title\">interval</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">Number</code> <br>Wait duration in seconds before the next result-request</li>\n</ul><p><span class=\"fa fa-star\"></span> <strong>body</strong> and <strong>string_body</strong> fields support <a href=\"http://mustache.github.io/mustache.5.html\">mustache syntax</a> for accessing values inside the matching result object.</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code style=\"white-space: pre;\">Object</code> with</p><ul>\n<li><code style=\"white-space: pre;\">'data'</code> and <code style=\"white-space: pre;\">'error'</code> event handlers</li>\n<li>a <strong>change()</strong> method to replace the destination URL object</li>\n<li>a <strong>stop()</strong> method to de-register the webhook</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> We recommend using both <strong>change()</strong> and <strong>stop()</strong> methods inside the <code style=\"white-space: pre;\">data</code> or <code style=\"white-space: pre;\">error</code> event handlers due to the async nature of the <code style=\"white-space: pre;\">searchStreamToURL()</code> method.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"searchStreamToURL()"},{"content":"<h1 id=\"webhooks-guide\">Webhooks Guide</h1><p>Webhooks (aka streaming to a URL) allows you to set up integrations which respond to events in appbase.io. Webhooks can be used to send transaction emails, post on a slack channel when a new user signs up, update the pricing plan when the data storage crosses a threshold.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"WEBHOOKS GUIDE"},{"content":"<h2 id=\"webhooks-guide-how-webhooks-are-triggered\">How webhooks are triggered</h2><p>Webooks are continuous queries whose results are subscribed by a URL. A webhooks object contains 1) continuous query and 2) subscribed URL’s configurations (headers, body payload, count, interval).</p><p>Webhooks can be triggered when a new document is inserted, an existing document changes it’s value, or when a new document matches a specific continuous query condition.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"HOW WEBHOOKS ARE TRIGGERED"},{"content":"<h2 id=\"webhooks-guide-composing-webhooks-queries\">Composing Webhooks Queries</h2><p>Since registering a webhook is a method of the <code style=\"white-space: pre;\">Appbase</code> object, we will start with instantiating an Appbase object.</p><p>Webhooks in appbase-js are supported by <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code style=\"white-space: pre;\">searchStreamToURL()</code></a>. The behavior is very similar to  <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstream\"><code style=\"white-space: pre;\">searchStream()</code></a>, where the results are subscribed via a streams interface. Instead of subscribing the results back to the user, webhooks subscribe them to a URL.</p><p>Here, we set the webhook request to be sent every time there is a document insert in the <code style=\"white-space: pre;\">type</code> tweet. To control for the noise, we set the <code style=\"white-space: pre;\">interval</code> to 60s.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"COMPOSING WEBHOOKS QUERIES"},{"content":"<h3 id=\"webhooks-guide-composing-webhooks-queries-modifying-a-webhooks-url\">Modifying a Webhook’s URL</h3><p>The <code style=\"white-space: pre;\">searchStreamToURL()</code> method returns a stream object with a method <code style=\"white-space: pre;\">change()</code> which can be used to change the webhook’s subscribed URL for the original continuous query.</p><p><code style=\"white-space: pre;\">change(object)</code> method accepts a URL object which completely replaces the previous URL object.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Modifying a Webhook’s URL"},{"content":"<h3 id=\"webhooks-guide-composing-webhooks-queries-deregistering-the-webhook-query\">Deregistering the Webhook Query</h3><p>The <code style=\"white-space: pre;\">searchStreamToURL()</code> method returns a stream object with a method <code style=\"white-space: pre;\">stop()</code> which deletes the webhook query.</p><p><code style=\"white-space: pre;\">stop()</code> method deletes the webhook query. It’s important to call this method only after the webhook is successfully registered.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Deregistering the Webhook Query"},{"content":"<h2 id=\"webhooks-guide-adding-dynamic-data-in-webhooks\">Adding Dynamic Data in Webhooks</h2><p>Webhooks in appbase.io are designed for configurability.</p><p>Together, these three features allow for a very versatile webhooks streaming. In this doc, we will look at composing webhook queries and a number of different usage scenarios for webhooks.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"ADDING DYNAMIC DATA IN WEBHOOKS"},{"content":"<h3 id=\"webhooks-guide-adding-dynamic-data-in-webhooks-mustache-syntax\">Mustache Syntax</h3><p>One of the biggest uses of webhooks is sending transaction notifications, like sending an email or a push notification within the app. We support Mustache syntax for enabling sending dynamic data in webhook request’s body payload.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Mustache Syntax"},{"content":"<h2 id=\"webhooks-guide-usage-scenarios\">Usage Scenarios</h2>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"USAGE SCENARIOS"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-1-top-10-daily-recommendations\">1. Top 10 daily recommendations</h3>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"1. Top 10 daily recommendations"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-2-pricing-plan-change-and-notification\">2. Pricing plan change and notification</h3>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"2. Pricing plan change and notification"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-3-bitcoin-price-alert\">3. Bitcoin price alert</h3><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/javascript/index\" ng-bind=\"folder.name\" href=\"#/scalr/javascript/index\">javascript</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-intro\">JS Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/nodejs-intro\" ng-bind=\"file.label\" href=\"#/scalr/javascript/nodejs-intro\">Node Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/api-reference\" ng-bind=\"file.label\" href=\"#/scalr/javascript/api-reference\">API Reference</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/javascript/javascript-webhooks\" ng-bind=\"file.label\" href=\"#/scalr/javascript/javascript-webhooks\">Webhooks Guide</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"3. Bitcoin price alert"},{"content":"<h1 id=\"quick-start-to-the-rest-api\">Quick Start to the <img src=\"https://i.imgur.com/a1KAate.png\" alt=\"Scalr\"> REST API:</h1>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"QUICK START TO THE  REST API:"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"https://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for simple username/password authentication. This is similar to how GitHub’s authentication works over <code style=\"white-space: pre;\">https</code>, just imagine every repository (app in our context) having it’s unique &lt;username&gt;:&lt;password&gt; combination.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-making-requests\">Step 1: Making Requests</h2><p>Here’s an example authenticated <code style=\"white-space: pre;\">GET</code> request. We will set the app name, username and password as bash variables and reuse them in the requests.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"STEP 1: MAKING REQUESTS"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-storing-data\">Step 1: Storing Data</h2><p>Let’s insert a JSON object. We create a <strong>type</strong> <code style=\"white-space: pre;\">books</code> inside our app and add a JSON document <code style=\"white-space: pre;\">1</code> with a PUT request.</p><p>If you have noticed, SCALR uses the same APIs as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"STEP 1: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data\">Step 2: <s>GETing</s> err, Streaming Data</h2><p>Getting live updates to a document is as simple as suffixing <code style=\"white-space: pre;\">?stream=true</code> to a GET request. It’s so awesome that we recommend using this as the default way to GET things.</p><p>Appbase.io keeps an open connection so that every time there is an update in the <code style=\"white-space: pre;\">/$app/books/1</code> document, it is streamed via the connection.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"STEP 2: GETING ERR, STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2a-modify-the-document\">Step 2.a: Modify the Document</h3><p>Let’s modify the book price to 6034.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"Step 2.a: Modify the Document"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2b-observe-the-streams\">Step 2.b: Observe the Streams</h3><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed to the resonse as raw JSON objects. As we see, there are no delimiters between between two consecutive JSON responses.</p><p>For every <code style=\"white-space: pre;\">?stream=true</code> request, Appbase.io keeps an open connection up to a max of 6 hrs.</p>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"Step 2.b: Observe the Streams"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-3-streaming-search\">Step 3: Streaming Search</h2><p>Streaming document updates seems straightforward, can we apply rich filters and queries to our streams? Yes, we can. We can specify any ElasticSearch Query DSL request, and get responses via streams.</p><p>We will see it here with a <code style=\"white-space: pre;\">match_all</code> query request.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/rest/index\" ng-bind=\"folder.name\" href=\"#/scalr/rest/index\">rest</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/intro\" ng-bind=\"file.label\" href=\"#/scalr/rest/intro\">Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/endpoints\" ng-bind=\"file.label\" href=\"#/scalr/rest/endpoints\">API Endpoints</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/rest.html","spaLink":"#/scalr/rest","title":"STEP 3: STREAMING SEARCH"},{"content":"<h1 id=\"quick-start-to-the-rest-api\">Quick Start to the <img src=\"https://i.imgur.com/a1KAate.png\" alt=\"Scalr\"> REST API:</h1>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"QUICK START TO THE  REST API:"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"https://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for simple username/password authentication. This is similar to how GitHub’s authentication works over <code style=\"white-space: pre;\">https</code>, just imagine every repository (app in our context) having it’s unique &lt;username&gt;:&lt;password&gt; combination.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-making-requests\">Step 1: Making Requests</h2><p>Here’s an example authenticated <code style=\"white-space: pre;\">GET</code> request. We will set the app name, username and password as bash variables and reuse them in the requests.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 1: MAKING REQUESTS"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-storing-data\">Step 1: Storing Data</h2><p>Let’s insert a JSON object. We create a <strong>type</strong> <code style=\"white-space: pre;\">books</code> inside our app and add a JSON document <code style=\"white-space: pre;\">1</code> with a PUT request.</p><p>If you have noticed, SCALR uses the same APIs as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 1: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data\">Step 2: <s>GETing</s> err, Streaming Data</h2><p>Getting live updates to a document is as simple as suffixing <code style=\"white-space: pre;\">?stream=true</code> to a GET request. It’s so awesome that we recommend using this as the default way to GET things.</p><p>Appbase.io keeps an open connection so that every time there is an update in the <code style=\"white-space: pre;\">/$app/books/1</code> document, it is streamed via the connection.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 2: GETING ERR, STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2a-modify-the-document\">Step 2.a: Modify the Document</h3><p>Let’s modify the book price to 6034.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"Step 2.a: Modify the Document"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2b-observe-the-streams\">Step 2.b: Observe the Streams</h3><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed to the resonse as raw JSON objects. As we see, there are no delimiters between between two consecutive JSON responses.</p><p>For every <code style=\"white-space: pre;\">?stream=true</code> request, Appbase.io keeps an open connection up to a max of 6 hrs.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"Step 2.b: Observe the Streams"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-3-streaming-search\">Step 3: Streaming Search</h2><p>Streaming document updates seems straightforward, can we apply rich filters and queries to our streams? Yes, we can. We can specify any ElasticSearch Query DSL request, and get responses via streams.</p><p>We will see it here with a <code style=\"white-space: pre;\">match_all</code> query request.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/rest/index\" ng-bind=\"folder.name\" href=\"#/scalr/rest/index\">rest</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/intro\" ng-bind=\"file.label\" href=\"#/scalr/rest/intro\">Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/endpoints\" ng-bind=\"file.label\" href=\"#/scalr/rest/endpoints\">API Endpoints</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 3: STREAMING SEARCH"},{"content":"<h1 id=\"supported-api-endpoints\">Supported API Endpoints</h1><p>Here is a list of all the supported endpoints for the Elasticsearch service offered by appbase.io.</p>","link":"./scalr/rest/endpoints.html","spaLink":"#/scalr/rest/endpoints","title":"SUPPORTED API ENDPOINTS"},{"content":"<h2 id=\"supported-api-endpoints-index-apis\">Index APIs</h2><p>An app in appbase.io is an index in Elasticsearch.</p><ul>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-index.html\"><strong>Get an App</strong> <code style=\"white-space: pre;\">GET /:app</code></a><br>Informational endpoint</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-settings.html\"><strong>Get an App’s Settings</strong> <code style=\"white-space: pre;\">GET /:app/_settings</code></a><br>Get settings in an app</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-analyze.html#indices-analyze\"><strong>Analyze a text</strong> <code style=\"white-space: pre;\">GET /:app/_analyze</code></a><br>Run a specific analyzer against a text</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html\"><strong>Get an App’s Mapping</strong> <code style=\"white-space: pre;\">GET /:app/_mapping</code></a><br>Get mappings for an app</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html\"><strong>Get a particular type’s Mapping</strong> <code style=\"white-space: pre;\">GET /:app/_mapping/:type</code></a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-put-mapping.html\"><strong>Add mapping for a new type</strong> <code style=\"white-space: pre;\">PUT /:app/_mapping/type</code></a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html\"><strong>Close an App</strong> <code style=\"white-space: pre;\">POST /:app/_close</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html\"><strong>Open an App</strong> <code style=\"white-space: pre;\">POST /:app/_open</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-recovery.html\"><strong>Get recovery information for an App</strong> <code style=\"white-space: pre;\">GET /:app/_recovery</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-stats.html\"><strong>Get an App’s stats</strong> <code style=\"white-space: pre;\">GET /:app/_stats</code></a></p>\n</li>\n</ul><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-index.html\"><strong>Get an App</strong> <code style=\"white-space: pre;\">GET /:app</code></a><br>Informational endpoint</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-settings.html\"><strong>Get an App’s Settings</strong> <code style=\"white-space: pre;\">GET /:app/_settings</code></a><br>Get settings in an app</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-analyze.html#indices-analyze\"><strong>Analyze a text</strong> <code style=\"white-space: pre;\">GET /:app/_analyze</code></a><br>Run a specific analyzer against a text</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html\"><strong>Get an App’s Mapping</strong> <code style=\"white-space: pre;\">GET /:app/_mapping</code></a><br>Get mappings for an app</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html\"><strong>Get a particular type’s Mapping</strong> <code style=\"white-space: pre;\">GET /:app/_mapping/:type</code></a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-put-mapping.html\"><strong>Add mapping for a new type</strong> <code style=\"white-space: pre;\">PUT /:app/_mapping/type</code></a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html\"><strong>Close an App</strong> <code style=\"white-space: pre;\">POST /:app/_close</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html\"><strong>Open an App</strong> <code style=\"white-space: pre;\">POST /:app/_open</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-recovery.html\"><strong>Get recovery information for an App</strong> <code style=\"white-space: pre;\">GET /:app/_recovery</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-stats.html\"><strong>Get an App’s stats</strong> <code style=\"white-space: pre;\">GET /:app/_stats</code></a></p>","link":"./scalr/rest/endpoints.html","spaLink":"#/scalr/rest/endpoints","title":"INDEX APIS"},{"content":"<h2 id=\"supported-api-endpoints-document-apis\">Document APIs</h2><ul>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html#docs-index_\"><strong>Indexing a Document</strong> <code style=\"white-space: pre;\">PUT /:app/:type/:id</code></a><br>with an id.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html#_automatic_id_generation\"><strong>Indexing a Document</strong> <code style=\"white-space: pre;\">POST /:app/:type/</code></a><br>without an id.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html\"><strong>Getting a Document</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html#_source\"><strong>Getting a Document Source</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id/_source</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-delete.html\"><strong>Deleting a Document</strong> <code style=\"white-space: pre;\">DELETE /:app/:type/:id</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update.html\"><strong>Updating a Document</strong> <code style=\"white-space: pre;\">PUT /:app/:type/:id/_update</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update-by-query.html\"><strong>Updating a Document By Query</strong> <code style=\"white-space: pre;\">POST /:app/:type/_update_by_query</code></a></p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html#docs-multi-get\"><strong>Getting Multiple Documents</strong> <code style=\"white-space: pre;\">GET /:app/_mget</code></a><br>get documents across one or more types, specified in the request body.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html#docs-multi-get\"><strong>Getting Multiple Documents</strong> <code style=\"white-space: pre;\">GET /:app/:type/_mget</code></a><br>get documents on a specific type.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html\"><strong>Bulk Document API</strong> <code style=\"white-space: pre;\">POST /:app/_bulk</code></a><br>bulk operations across one or more types, specified in the request body.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html\"><strong>Bulk Document API</strong> <code style=\"white-space: pre;\">POST /:app/:type/_bulk</code></a><br>bulk operations on a specific type.</p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-termvectors.html\"><strong>Getting a Document’s Term Vectors</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id/_termvector</code></a></p>\n</li>\n</ul><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html#docs-index_\"><strong>Indexing a Document</strong> <code style=\"white-space: pre;\">PUT /:app/:type/:id</code></a><br>with an id.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html#_automatic_id_generation\"><strong>Indexing a Document</strong> <code style=\"white-space: pre;\">POST /:app/:type/</code></a><br>without an id.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html\"><strong>Getting a Document</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html#_source\"><strong>Getting a Document Source</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id/_source</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-delete.html\"><strong>Deleting a Document</strong> <code style=\"white-space: pre;\">DELETE /:app/:type/:id</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update.html\"><strong>Updating a Document</strong> <code style=\"white-space: pre;\">PUT /:app/:type/:id/_update</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update-by-query.html\"><strong>Updating a Document By Query</strong> <code style=\"white-space: pre;\">POST /:app/:type/_update_by_query</code></a></p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html#docs-multi-get\"><strong>Getting Multiple Documents</strong> <code style=\"white-space: pre;\">GET /:app/_mget</code></a><br>get documents across one or more types, specified in the request body.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html#docs-multi-get\"><strong>Getting Multiple Documents</strong> <code style=\"white-space: pre;\">GET /:app/:type/_mget</code></a><br>get documents on a specific type.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html\"><strong>Bulk Document API</strong> <code style=\"white-space: pre;\">POST /:app/_bulk</code></a><br>bulk operations across one or more types, specified in the request body.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html\"><strong>Bulk Document API</strong> <code style=\"white-space: pre;\">POST /:app/:type/_bulk</code></a><br>bulk operations on a specific type.</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-termvectors.html\"><strong>Getting a Document’s Term Vectors</strong> <code style=\"white-space: pre;\">GET /:app/:type/:id/_termvector</code></a></p>","link":"./scalr/rest/endpoints.html","spaLink":"#/scalr/rest/endpoints","title":"DOCUMENT APIS"},{"content":"<h2 id=\"supported-api-endpoints-search-apis\">Search APIs</h2><ul>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-search.html#search-search\"><strong>Search with query strings</strong> <code style=\"white-space: pre;\">GET /:app/:type/_search?q=*:*</code></a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-body.html\"><strong>Search with a request body</strong> <code style=\"white-space: pre;\">POST /:app/:type/_search</code></a><br>Everything in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/query-dsl.html\">Query DSL</a> is supported for the <strong>query</strong> object in the request body.</p>\n<p>  Popular Queries:</p>\n<ol>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/full-text-queries.html\">Full-text search</a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/term-level-queries.html\">Term Queries</a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/compound-queries.html\">Compound Queries</a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/geo-queries.html\">Geo Queries</a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/joining-queries.html\">Query Joins</a>  </p>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/span-queries.html\">Span Queries</a>  </p>\n</li>\n</ol>\n</li>\n<li><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/2.4/delete-by-query-usage.html\"><strong>Delete by query</strong> <code style=\"white-space: pre;\">DELETE /:app/:type/_query</code></a><br>Delete documents matching the search query, everything in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/query-dsl.html\">Query DSL</a> is supported for the <strong>query</strong> object in the request body.</p>\n</li>\n</ul><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-search.html#search-search\"><strong>Search with query strings</strong> <code style=\"white-space: pre;\">GET /:app/:type/_search?q=*:*</code></a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-body.html\"><strong>Search with a request body</strong> <code style=\"white-space: pre;\">POST /:app/:type/_search</code></a><br>Everything in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/query-dsl.html\">Query DSL</a> is supported for the <strong>query</strong> object in the request body.</p><p>  Popular Queries:</p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/full-text-queries.html\">Full-text search</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/term-level-queries.html\">Term Queries</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/compound-queries.html\">Compound Queries</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/geo-queries.html\">Geo Queries</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/joining-queries.html\">Query Joins</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/span-queries.html\">Span Queries</a>  </p><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/2.4/delete-by-query-usage.html\"><strong>Delete by query</strong> <code style=\"white-space: pre;\">DELETE /:app/:type/_query</code></a><br>Delete documents matching the search query, everything in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/query-dsl.html\">Query DSL</a> is supported for the <strong>query</strong> object in the request body.</p>","link":"./scalr/rest/endpoints.html","spaLink":"#/scalr/rest/endpoints","title":"SEARCH APIS"},{"content":"<h2 id=\"supported-api-endpoints-streaming-apis\">Streaming APIs</h2><ul>\n<li><p><strong class=\"li-title\">Stream a Document</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">GET /:app/:type/:id?stream=true</code><br>Fetches the document and streams further updates to the document.</p>\n</li>\n<li><p><strong class=\"li-title\">Stream a Query</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">GET /:app/:type/_search?stream=true</code> (or POST)<br>Fetches a query’s response and streams further updates to the query.</p>\n</li>\n</ul><p><strong class=\"li-title\">Stream a Document</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">GET /:app/:type/:id?stream=true</code><br>Fetches the document and streams further updates to the document.</p><p><strong class=\"li-title\">Stream a Query</strong> <code class=\"code-with-title\" style=\"white-space: pre;\">GET /:app/:type/_search?stream=true</code> (or POST)<br>Fetches a query’s response and streams further updates to the query.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/rest/index\" ng-bind=\"folder.name\" href=\"#/scalr/rest/index\">rest</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/intro\" ng-bind=\"file.label\" href=\"#/scalr/rest/intro\">Quick Start</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/rest/endpoints\" ng-bind=\"file.label\" href=\"#/scalr/rest/endpoints\">API Endpoints</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/rest/endpoints.html","spaLink":"#/scalr/rest/endpoints","title":"STREAMING APIS"},{"content":"<h1 id=\"apireferencegodoc\"><a href=\"https://godoc.org/github.com/appbaseio/go-appbase\" target=\"_blank\">APIreference@godoc <span class=\"fa fa-external-link\"></span></a></h1><p><a href=\"https://github.com/appbaseio/go-appbase\">go-appbase</a> is a data streams library for Go. You can read the API reference from godoc.org using the link above.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over http-streams.  </li>\n<li>Index new documents and update existing ones.  </li>\n<li>Is compatible with <a href=\"https://github.com/olivere/elastic\">Elasticsearch’s Go Client</a> maintained by Olivere. </li>\n</ul><p>You can read the <a href=\"http://docs.appbase.io/scalr/golang/golang-intro.html\">quick start guide</a> for installation and basic usage.</p>","link":"./scalr/golang.html","spaLink":"#/scalr/golang","title":"APIREFERENCE@GODOC "},{"content":"<h1 id=\"apireferencegodoc\"><a href=\"https://godoc.org/github.com/appbaseio/go-appbase\" target=\"_blank\">APIreference@godoc <span class=\"fa fa-external-link\"></span></a></h1><p><a href=\"https://github.com/appbaseio/go-appbase\">go-appbase</a> is a data streams library for Go. You can read the API reference from godoc.org using the link above.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over http-streams.  </li>\n<li>Index new documents and update existing ones.  </li>\n<li>Is compatible with <a href=\"https://github.com/olivere/elastic\">Elasticsearch’s Go Client</a> maintained by Olivere. </li>\n</ul><p>You can read the <a href=\"http://docs.appbase.io/scalr/golang/golang-intro.html\">quick start guide</a> for installation and basic usage.</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"APIREFERENCE@GODOC "},{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"HOW TO"},{"content":"<h2 id=\"how-to-unsubscribe-from-a-streaming-query\">Unsubscribe from a streaming query</h2><p>The JS API methods for the <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-setup-new-appbase\"><code style=\"white-space: pre;\">appbaseRef</code></a> object implement a <strong>streams</strong> interface. Let’s see an example:</p><p>Unsubscribing from the <code style=\"white-space: pre;\">responseStream</code> is simple: using <code style=\"white-space: pre;\">stop()</code> method.</p><p><span class=\"fa fa-info-circle\"></span> The same is true for all other methods (like <code style=\"white-space: pre;\">index()</code>, <code style=\"white-space: pre;\">getStream()</code>) as well, data is returned asynchronously via the ‘data’ event handler.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"UNSUBSCRIBE FROM A STREAMING QUERY"},{"content":"<h2 id=\"how-to-pause-a-streaming-query\">Pause a streaming query</h2><p><a href=\"https://nodejs.org/api/stream.html#stream_readable_pause\">Pausing a response stream object</a> prevents new data responses from emitting. The stream can be resumed again via conveniently named <code style=\"white-space: pre;\">responseStream.resume()</code>.</p><p><span class=\"fa fa-info-circle\"></span> <strong>pause()</strong> vs <strong>stop()</strong> - pause() merely prevents emitting new responses in the ‘data’ event handler, all the response stream object buffers the new events emitted by the <code style=\"white-space: pre;\">searchStream()</code> method. When resume() is called, all these responses are returned by the ‘data’ event handler. </p><p>By contrast, <code style=\"white-space: pre;\">stop()</code> unsubscribes from the query and kills the response stream object.</p><p><span class=\"fa fa-star\"></span> Check out more things you can do with streams here -  <a href=\"http://www.sitepoint.com/basics-node-js-streams/\">http://www.sitepoint.com/basics-node-js-streams/</a>.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"PAUSE A STREAMING QUERY"},{"content":"<h2 id=\"how-to-stream-results-of-a-range-query\">Stream results of a range query</h2><p>Appbase.io implements a streaming interface for the entire <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl.html\">Query DSL</a> supported by ElasticSearch. So if we can compose a range query, making it return continuous results is easy.</p><p>Let’s say we have a <strong>type</strong> called <em>items</em> which contains items with their corresponding value. An example document inside the <em>items</em> type looks like:</p><p>Composing the query:</p><p>The default state of <code style=\"white-space: pre;\">responseStream</code> object is paused. As soon as attach a data handler to it, it will start streaming the responses.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"STREAM RESULTS OF A RANGE QUERY"},{"content":"<h2 id=\"how-to-change-the-default-results-in-a-search-query\">Change the default results in a search query</h2><p>Appbase returns 10 objects in the initial response to <code style=\"white-space: pre;\">searchStream()</code> method. Sometimes, we need to return more objects. We can do this by specifying the <code style=\"white-space: pre;\">size</code> attribute inside our query like this:</p><p>The <code style=\"white-space: pre;\">responseStream</code> object will now return max(total_objects_matching_our_query, 100) objects on the <code style=\"white-space: pre;\">'data'</code> event handler.</p><p><span class=\"fa fa-star\"></span> The <code style=\"white-space: pre;\">size</code> attribute can specify a maximum of 1000 objects to return in one response.</p><p><span class=\"fa fa-info-circle\"></span> <code style=\"white-space: pre;\">size</code> attribute can be applied on both <code style=\"white-space: pre;\">searchStream()</code> and <code style=\"white-space: pre;\">search()</code> methods.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"CHANGE THE DEFAULT RESULTS IN A SEARCH QUERY"},{"content":"<h2 id=\"how-to-scroll-results-in-a-search-query\">Scroll results in a search query</h2><p>While the <code style=\"white-space: pre;\">size</code> attribute inside the query can allow you to control the number of results to return initially, it does not let you implement a scroll like functionality: i.e. showing results from a particular offset in correspondence with user’s navigation behavior. The <code style=\"white-space: pre;\">from</code> parameter comes handy here.</p><p>The <code style=\"white-space: pre;\">response</code> object will now return up to 100 objects starting from the 51<sup>st</sup> object.</p><p><span class=\"fa fa-info-circle\"></span> <code style=\"white-space: pre;\">from</code> attribute is effective for the <code style=\"white-space: pre;\">search()</code> method, but not for the <code style=\"white-space: pre;\">searchStream()</code> method as the latter only returns one result at a time.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/FAQs/index\" ng-bind=\"folder.name\" href=\"#/scalr/FAQs/index\">FAQs</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/jsapi\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/jsapi\">JS API</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/rest\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/rest\">REST</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"SCROLL RESULTS IN A SEARCH QUERY"},{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"HOW TO"},{"content":"<h2 id=\"how-to-unsubscribe-from-a-streaming-query\">Unsubscribe from a streaming query</h2><p>The JS API methods for the <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-setup-new-appbase\"><code style=\"white-space: pre;\">appbaseRef</code></a> object implement a <strong>streams</strong> interface. Let’s see an example:</p><p>Unsubscribing from the <code style=\"white-space: pre;\">responseStream</code> is simple: using <code style=\"white-space: pre;\">stop()</code> method.</p><p><span class=\"fa fa-info-circle\"></span> The same is true for all other methods (like <code style=\"white-space: pre;\">index()</code>, <code style=\"white-space: pre;\">getStream()</code>) as well, data is returned asynchronously via the ‘data’ event handler.</p>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"UNSUBSCRIBE FROM A STREAMING QUERY"},{"content":"<h2 id=\"how-to-pause-a-streaming-query\">Pause a streaming query</h2><p><a href=\"https://nodejs.org/api/stream.html#stream_readable_pause\">Pausing a response stream object</a> prevents new data responses from emitting. The stream can be resumed again via conveniently named <code style=\"white-space: pre;\">responseStream.resume()</code>.</p><p><span class=\"fa fa-info-circle\"></span> <strong>pause()</strong> vs <strong>stop()</strong> - pause() merely prevents emitting new responses in the ‘data’ event handler, all the response stream object buffers the new events emitted by the <code style=\"white-space: pre;\">searchStream()</code> method. When resume() is called, all these responses are returned by the ‘data’ event handler. </p><p>By contrast, <code style=\"white-space: pre;\">stop()</code> unsubscribes from the query and kills the response stream object.</p><p><span class=\"fa fa-star\"></span> Check out more things you can do with streams here -  <a href=\"http://www.sitepoint.com/basics-node-js-streams/\">http://www.sitepoint.com/basics-node-js-streams/</a>.</p>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"PAUSE A STREAMING QUERY"},{"content":"<h2 id=\"how-to-stream-results-of-a-range-query\">Stream results of a range query</h2><p>Appbase.io implements a streaming interface for the entire <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl.html\">Query DSL</a> supported by ElasticSearch. So if we can compose a range query, making it return continuous results is easy.</p><p>Let’s say we have a <strong>type</strong> called <em>items</em> which contains items with their corresponding value. An example document inside the <em>items</em> type looks like:</p><p>Composing the query:</p><p>The default state of <code style=\"white-space: pre;\">responseStream</code> object is paused. As soon as attach a data handler to it, it will start streaming the responses.</p>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"STREAM RESULTS OF A RANGE QUERY"},{"content":"<h2 id=\"how-to-change-the-default-results-in-a-search-query\">Change the default results in a search query</h2><p>Appbase returns 10 objects in the initial response to <code style=\"white-space: pre;\">searchStream()</code> method. Sometimes, we need to return more objects. We can do this by specifying the <code style=\"white-space: pre;\">size</code> attribute inside our query like this:</p><p>The <code style=\"white-space: pre;\">responseStream</code> object will now return max(total_objects_matching_our_query, 100) objects on the <code style=\"white-space: pre;\">'data'</code> event handler.</p><p><span class=\"fa fa-star\"></span> The <code style=\"white-space: pre;\">size</code> attribute can specify a maximum of 1000 objects to return in one response.</p><p><span class=\"fa fa-info-circle\"></span> <code style=\"white-space: pre;\">size</code> attribute can be applied on both <code style=\"white-space: pre;\">searchStream()</code> and <code style=\"white-space: pre;\">search()</code> methods.</p>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"CHANGE THE DEFAULT RESULTS IN A SEARCH QUERY"},{"content":"<h2 id=\"how-to-scroll-results-in-a-search-query\">Scroll results in a search query</h2><p>While the <code style=\"white-space: pre;\">size</code> attribute inside the query can allow you to control the number of results to return initially, it does not let you implement a scroll like functionality: i.e. showing results from a particular offset in correspondence with user’s navigation behavior. The <code style=\"white-space: pre;\">from</code> parameter comes handy here.</p><p>The <code style=\"white-space: pre;\">response</code> object will now return up to 100 objects starting from the 51<sup>st</sup> object.</p><p><span class=\"fa fa-info-circle\"></span> <code style=\"white-space: pre;\">from</code> attribute is effective for the <code style=\"white-space: pre;\">search()</code> method, but not for the <code style=\"white-space: pre;\">searchStream()</code> method as the latter only returns one result at a time.</p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/FAQs/index\" ng-bind=\"folder.name\" href=\"#/scalr/FAQs/index\">FAQs</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/jsapi\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/jsapi\">JS API</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/rest\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/rest\">REST</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/FAQs.html","spaLink":"#/scalr/FAQs","title":"SCROLL RESULTS IN A SEARCH QUERY"},{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"HOW TO"},{"content":"<h2 id=\"how-to-update-mapping-without-losing-data\">Update mapping without losing data</h2><p>Although you can add new types to an index, or add new fields to a type, you can’t add new analyzers or make changes to existing fields. If you were to do so, the data that had already been indexed would be incorrect and your searches would no longer work as expected. Here’s a short gist on how mappings work:</p><p>In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed cannot be used because of the datatype mismatch. In such situations, you need to reindex that field.</p><p>This applies not just to Appbase (or Elasticsearch / Lucene - the datastore used by Appbase), but to any database that uses indices for searching. And if it isn’t using indices then it is sacrificing speed for flexibility.</p><p>There is one situation where re-indexing is not required: when adding a field, as a previous mapping for the field didn’t exist and Appbase can infer the field datatype when it’s indexed for the first time.</p><p>Since updating mapping =&gt; reindexing data, let’s take a look at that.</p>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"UPDATE MAPPING WITHOUT LOSING DATA"},{"content":"<h3 id=\"how-to-update-mapping-without-losing-data-reindexing-your-data\">Reindexing your data</h3><p>The process for reindexing your data is quite simple. First, create a new app in appbase and update the new mapping and settings:  </p><p>One of the advantages of the _source field is that you already have the whole document available to you in Elasticsearch itself. You don’t have to rebuild your index from the database, which is usually much slower.</p><p>To reindex all of the documents from the old index efficiently, use <a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html\">scan-and-scroll</a> to retrieve batches of documents from the old index, and the <a href=\"https://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-writing-data-bulk\">bulk API</a> to push them into the new index.</p>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"Reindexing your data"},{"content":"<h3 id=\"how-to-update-mapping-without-losing-data-reindexing-in-batches\">Reindexing in Batches</h3><p>You can run multiple reindexing jobs at the same time, but you obviously don’t want their results to overlap. Instead, break a big reindex down into smaller jobs by filtering on a date or timestamp field:  </p><p>If you continue making changes to the old app, you will want to make sure that you include the newly added documents in your new app as well. This can be done by rerunning the reindex process, but again filtering on a date field to match only documents that have been added since the last reindex process started.</p><p>Reference: <a href=\"https://www.elastic.co/blog/changing-mapping-with-zero-downtime\">Elastic Search blog</a></p><ul class=\"menu section ng-scope\" ng-repeat=\"folder in map[currentVersion]\" data-ng-if=\"folder.name === currentFolder\">\n\t\t\t<li>\n\t\t\t\t<div class=\"other-pages\">Other pages in</div>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a class=\"level-1 ng-binding\" ng-href=\"#/scalr/FAQs/index\" ng-bind=\"folder.name\" href=\"#/scalr/FAQs/index\">FAQs</a>\n\t\t\t</li>\n\t\t\t<!-- ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/jsapi\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/jsapi\">JS API</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><li ng-repeat=\"file in folder.files\" data-ng-if=\"file.name !== 'index'\" class=\"ng-scope\">\n\t\t\t\t<a class=\"level-2 ng-binding active\" data-ng-class=\"{'active': file.name === currentFile}\" ng-href=\"#/scalr/FAQs/rest\" ng-bind=\"file.label\" href=\"#/scalr/FAQs/rest\">REST</a>\n\t\t\t</li><!-- end ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files --><!-- ngIf: file.name !== 'index' --><!-- end ngRepeat: file in folder.files -->\n\t\t</ul>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"Reindexing in Batches"}]